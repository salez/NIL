<script type="text/javascript">
    var debug;
    var player = {
        isTurn: false,
        turnPhase: 0,
        isDefenseSet: false
    }
    var defenseSelect;
    var wait = false;
    var defenseMatchUps = [];

    function showTitle(title) {
        $('.battleTitle span').html(title);

        $('.battleTitle span').show();
        $('.battleTitle').fadeIn();

        setTimeout(function () {
            $('.battleTitle').css('transform', 'scale(0.5)');
        }, 100);

        setTimeout(function () {
            $('.battleTitle').css('transition', 'all 15s');
            $('.battleTitle').css('transform', 'scale(0.3)');
        }, 500);

        setTimeout(function () {
            $('.battleTitle span').fadeOut('fast', function () {
                $('.battleTitle').hide();
            });

            setTimeout(function () {
                $('.battleTitle').css('transition', 'all 0.5s');
                $('.battleTitle').css('transform', 'scale(1)');
            }, 100);
        }, 2500);
    }

    function showMenu(X, Y, target, menuTypeClass) {

        if (!player.isTurn || player.turnPhase > 2)
            return;

        var menu = $(".modalMenu");
        menu.find("li").each(function (i, obj) {
            if ($(obj).hasClass(menuTypeClass))
                $(obj).css("display", "block");
            else
                $(obj).css("display", "none");
        });
        menu.data("target", target);
        menu.css("top", Y + "px");
        menu.css("left", X + "px");
        menu.fadeIn();
    }
    function hideMenu() {
        var menu = $(".modalMenu");
        menu.fadeOut();
    }
    function flipCard(left, card, cardWrapper) {
        card.removeClass('flipped');

        cardWrapper.css('top', '200px');
        cardWrapper.css('left', left + 'px');
    }

    function drawCard() {
        var left = 200;
        $(".playerHand .cardWrapper").each(function (i, obj) {
            $(obj).css("left", left + "px");
            left += 150;
        });
        $.ajax({
            url: "@Url.Action("drawcard","battle")",
            success: function (result) {
                $(".playerHand").append(result);
                var card = $(".cardFlip.flipped");
                var cardWrapper = card.parent().parent();
                var left = (($(".playerHand .cardWrapper").length - 1) * 150) + 200;
                setTimeout(function () {
                    flipCard(left, card, cardWrapper);
                }, 300)
            },
            error: function (data) {
                console.log(data);
            }
        });
    }
    function putCard(sender) {
        var card = $(".cardWrapper[data-id=" + $(".modalMenu").data("target") + "]");
        var cost = parseInt(card.find(".custo_num").html());
        var image = $(card).find('.conteudo_imagem').css("background-image");
        var atk = parseInt(card.find(".ataque").html());
        var def = parseInt(card.find(".defesa").html());
        var playerMana = parseInt($(".player2 .playerManaBar").html());
        var field = $(".playerField .defenseField");
        if (cost > playerMana)
            return;
        var creature = {
            id: $(".modalMenu").data("target"),
            atk: atk,
            def: def,
            image: image
        };
        playerMana = playerMana - cost;

        $.ajax({
            url: "@Url.Action("putcardinfield","battle")",
            data: { cardId: creature.id },
            success: function (result) {
                if (result == '1') {
                    $(".player2 .playerManaBar").html(playerMana);

                    var creatureObj = buildCreatureHtml(creature);

                    field.append(creatureObj);

                    card.css('transform-origin', 'center center');
                    card.css('margin-top', '150px');

                    card.css('transform', 'scale(0.6)');
                    card.css('opacity', '0');

                    setTimeout(function () {
                        card.remove();

                        creatureObj.css('transform', 'scale(1)');
                        creatureObj.css('opacity', '1');
                        organizeCreatures(".playerField");
                    }, 500);

                }
            },
            error: function (data) {
                console.log(data);
            }
        });

    }

    function organizeCreatures() {
        $('.defenseField,.atackField').each(function () {
            var creatures = $(this).find('.creature');

            var countTotal = creatures.length;
            var totalSpace = 150 * countTotal;
            var spaceForEach = totalSpace / countTotal;

            var countAtual = creatures.length;

            var space = -((countAtual / 2) * spaceForEach);

            creatures.each(function () {
                $(this).css('margin-left', space + 'px');

                space = space + spaceForEach;
            });
        });
    }

    function buildCreatureHtml(creature) {
        var creatureHtml = "<div class='creature' data-id=" + creature.id + " style='opacity: 0; transform: scale(2); background-image:" + creature.image + "'>";
        creatureHtml += "<div class='fieldAttribute atk'>" + creature.atk + "</div>";
        creatureHtml += "<div class='fieldAttribute def'>" + creature.def + "</div>";
        creatureHtml += "</div>";

        return $(creatureHtml);
    }

    function finishAttack() {
        var attackers = $(".creature.used");
        var attackIds = [];

        attackers.each(function (i, obj) {
            attackIds.push(parseInt($(obj).attr("data-id")));
        });

        $.ajax({
            url: "@Url.Action("chooseattackers","battle")",
            data: JSON.stringify({ cardIds: attackIds }),
            type: "POST",
            contentType: "application/json",
            traditional: true,
            success: function (result) {
                if (result == 1) {
                    player.turnPhase = 3;//todo wait for defense;
                }
            },
            error: function (data) {
                console.log(data);
            }
        });
    }
    function attack(id) {
        var targetid = id != undefined ? id : $(".modalMenu").data("target");
        var creature = $(".creature[data-id=" + targetid + "]");
        var isFieldAttack = creature.parent().hasClass("atackField");
        if (isFieldAttack) {
            creature.addClass("used");
        }
        else {
            forward(targetid, true);
        }
    }
    function forward(id, isAttack) {
        var creature;
        var targetid = id != undefined ? id : $(".modalMenu").data("target");
        var creature = $(".creature[data-id=" + targetid + "]");

        $.ajax({
            url: "@Url.Action("movecardtoatackfield","battle")",
            data: { cardId: targetid },
            success: function (result) {
                if (result == 1) {
                    $(".playerField .atackField").append(creature);
                    if (isAttack)
                        $(creature).addClass("used");
                    return true;
                }
            },
            error: function (data) {
                console.log(data);
                return false;
            }
        });

    }
    function retreat(id) {
        var creature;
        var targetid = id != undefined ? id : $(".modalMenu").data("target");
        var creature = $(".creature[data-id=" + targetid + "]");


        $.ajax({
            url: "@Url.Action("MoveCardToDefenseField", "battle")",
            data: { cardId: targetid },
            success: function (result) {
                if (result == 1) {
                    creature.removeClass("used");
                    $(".playerField .defenseField").append(creature);
                }
            },
            error: function (data) {
                console.log(data);
            }
        });
    }

    function createDefenseMatch(atkId) {
        if (defenseSelect == 0 || defenseSelect == undefined || defenseSelect == null)
            return;
        var hasMatch = false;
        var atkCreature = $(".creature[data-id=" + atkId + "]");
        var match = {
            atkCardId: 0,
            defCardIds: []
        }



        $(defenseMatchUps).each(function (i, obj) {
            if (obj.defCardIds[0] == defenseSelect || obj.defCardIds[1] == defenseSelect) {
                var tempAttaker = $(".creature[data-id=" + obj.atk + "]")
                if (obj.defCardIds.length == 1) {
                    tempAttaker.removeClass("defended");
                    defenseMatchUps.splice(i, 1);
                }
                else {
                    if (obj.defCardIds[0] == defenseSelect)
                        obj.defCardIds.splice(0, 1);
                    else
                        obj.defCardIds.pop();

                    tempAttaker.removeClass("doubleDefended");
                    tempAttaker.addClass("defended");
                }
            }
        });
        $(defenseMatchUps).each(function (i, obj) {
            if (obj.atkCardId == atkId) {
                hasMatch = true;
                if (obj.defCardIds.length < 2)
                    obj.defCardIds.push(defenseSelect);
            }
        });

        if (!hasMatch) {
            match.atkCardId = atkId;
            match.defCardIds.push(defenseSelect);
            defenseMatchUps.push(match);
        }



        $(".creature[data-id=" + defenseSelect + "]").addClass("defending");
        if (hasMatch) {
            atkCreature.removeClass("defended");
            atkCreature.addClass("doubleDefended");
        }
        else {
            atkCreature.addClass("defended");
        }


        defenseSelect = 0;

    }


    function setDirectHit(id) {
        $.ajax({
            url: "@Url.Action("DirectHit", "battle")",
            data: { atkCardId: id }
        });
    }


    function finishDefense() {
        $(".creature.used").each(function (i, objCreature) {
            if (defenseMatchUps == null)
                defenseMatchUps = [];



            var hasDefense = false;
            var id = $(objCreature).attr("data-id");
            $(defenseMatchUps).each(function (i, obj) {
                if (obj.atkCardId == id)
                    hasDefense = true;
            });
            if (!hasDefense) {
                defenseMatchUps.push({
                    atkCardId: id,
                    defCardIds: [0]
                });
            }


        });

        $(defenseMatchUps).each(function (i, obj) {
            $.ajax({
                url: "@Url.Action("ChooseDefenders", "battle")",
                data: JSON.stringify(obj),
                contentType: "application/json",
                traditional: true,
                type: "POST",
                success: function (result) {
                    var atkCreature = $(".creature[data-id=" + result.atkId + "]");
                    if (result.atkIsDead)
                        atkCreature.remove();
                    else {
                        atkCreature.find(".def").html(result.atkLife);
                    }
                    for (var j = 0; j < result.defIds.length; j++) {
                        var objId = result.defIds[j];
                        if (objId != 0) {
                            var defCreature = $(".creature[data-id=" + objId + "]");
                            if (result.defIsDead[j])
                                defCreature.remove();
                            else {
                                defCreature.find(".def").html(result.defLife[j]);
                            }
                        }

                    }

                    if (i == defenseMatchUps.length - 1) {
                        endTurn();
                    }
                },
                error: function (data) {
                    console.log(data);
                    alert(data + "ERROR");
                    endTurn();
                }
            });
        })

        if (defenseMatchUps.length <= 0) {
            setTimeout(function () {
                updatePlayerLife();
            }, 6000);
        }
    }

    function updatePlayerLife() {
        $.ajax({
            url: "@Url.Action("GetPlayerLifes", "battle")",
            type: "POST",
            success: function (result) {
                $(".player1 .playerLifeBar").html(result.computer);
                $(".player2 .playerLifeBar").html(result.player);
            }
        });
    }

    function updatePlayerMana() {
        $.ajax({
            url: "@Url.Action("GetPlayerMana", "battle")",
            type: "POST",
            success: function (result) {
                $(".player1 .playerManaBar").html(result.computer);
                $(".player2 .playerManaBar").html(result.player);
            }
        });
    }


    function computerAttack(attackers) {
        $(attackers).each(function (i, obj) {
            $(".creature[data-id=" + obj.Id + "]").addClass("used")
            computerFoward(obj.Id);
        })
    }
    function putComputerCards(data) {
        $(data).each(function (i, obj) {
            var creatureObj = buildCreatureHtml({
                id: obj.Id,
                atk: obj.Ataque,
                def: obj.Defesa,
                image: 'url("@Url.Content("~/images/cartas/")' + obj.Id.toString() + '.jpg")'
            });
            $(".computerField .defenseField").append(creatureObj);
            setTimeout(function () {
                creatureObj.css('transform', 'scale(1)');
                creatureObj.css('opacity', '1');
                organizeCreatures(".computerField");
            }, 500)
        });
    }
    function computerFoward(id) {
        var creature = $(".creature[data-id=" + id + "]");
        $(".computerField .atackField").append(creature);
        organizeCreatures(".computerField");
    }
    function computerRetreat(id) {
        var creature = $(".creature[data-id=" + id + "]");
        $(".computerField .defenseField").append(creature);
    }
    function endTurn() {
        defenseMatchUps = [];
        defenseSelect = 0;

        $(".creature").removeClass("used");
        $(".creature").removeClass("defended");
        $(".creature").removeClass("defending");
        $(".creature").removeClass("doubleDefended");

        updatePlayerLife();
        updatePlayerMana();
        //EndComputerTurn
        $.ajax({
            url: "@Url.Action("EndTurn", "battle")",
            success: function (result) {
                player.isDefenseSet = false;
                player.turnPhase = 1;
                player.isTurn = false;
            },
            error: function (data) {
                console.log(data);
            }
        });
    }

    $(document).ready(function () {

        var flipTimer = 500;
        var cardLeft = 200;

        organizeCreatures(".computerField");
        organizeCreatures(".playerField");

        $('.cardFlip').each(function () {
            var card = $(this);
            var cardWrapper = card.parent().parent();

            setTimeout(function () {

                setTimeout(function () {
                    card.removeClass('flipped')
                }, 50
                );

                cardWrapper.css('top', '200px');
                cardWrapper.css('left', cardLeft + 'px');

                cardLeft = cardLeft + 150;

            }, flipTimer);

            flipTimer += 300;
        });

        $(".playerField").click(function (ev) {
            var src = $(ev.srcElement);
            var posX = ev.pageX;
            var posY = ev.pageY;

            while (!src.hasClass("creature")) {
                src = src.parent();

                if (src.html() == 'null' || src.html() == null || src == null)
                    return;
            }

            var menuType = src.parent().hasClass("defenseField") ? "jsDef" : "jsAtk";
            if (!player.isDefenseSet)
                showMenu(posX, posY, src.attr("data-id"), menuType);
            else if (player.isDefenseSet && menuType == "jsDef") {
                defenseSelect = src.attr("data-id");
            }

        });
        $(".computerField .atackField").click(function (ev) {
            if (!player.isDefenseSet)
                return;

            var src = $(ev.srcElement);
            while (!src.hasClass("creature")) {
                src = src.parent();
                if (src.html() == 'null' || src.html() == null || src == null)
                    return;
            }
            createDefenseMatch(src.attr("data-id"));

        })

        $(".modalMenu li").click(function () {
            hideMenu();
        });
        $(".finishButton").click(function () {
            finishAttack();
        });
        $(".finishDefenseButton").click(function () {
            finishDefense();
        });

        $(".playerHand").click(function (ev) {
            var src = $(ev.srcElement);
            var posX = ev.pageX;
            var posY = ev.pageY;

            while (!src.hasClass("cardWrapper")) {
                src = src.parent();

                if (src.html() == 'null' || src.html() == null || src == null)
                    return;
            }

            showMenu(posX, posY, src.attr("data-id"), "jsHand");
        });

        setInterval(function () {
            if ((player.isTurn && player.turnPhase <= 2) || player.isDefenseSet)
                return;

            if (wait)
                return;

            wait = true;

            $.ajax({
                url: "@Url.Action("verifyphase","battle")",
                type: "POST",
                success: function (result) {
                    player.isTurn = result.isYourTurn;
                    player.turnPhase = result.phase;

                    if (result.isYourTurn) {
                        switch (result.phase) {
                            case 1:
                                updatePlayerMana();
                                updatePlayerLife();
                                showTitle('SEU TURNO');
                                drawCard();
                                break;
                            case 4:
                                var atkDefList = $.parseJSON(result.data);
                                var defaultInterval = 1000;
                                $(atkDefList).each(function (i, obj) {
                                    setTimeout(function () {
                                        defenseSelect = obj.defCardId;
                                        createDefenseMatch(obj.atkCardId);
                                        if (i == atkDefList.length - 1) {
                                            finishDefense();
                                        }
                                    }, defaultInterval * i);
                                });
                                if (atkDefList.length == 0) {
                                    finishDefense();
                                }
                                break;
                            default:
                                break;
                        }
                    }
                    else {
                        switch (result.phase) {
                            case 2:
                                putComputerCards($.parseJSON(result.data));
                                break;
                            case 3:
                                var attakers = $.parseJSON(result.data);

                                if (attakers.length == 0) {
                                    endTurn();
                                }
                                else {
                                    computerAttack(attakers);
                                    player.isDefenseSet = true;
                                }
                                break;
                            default:
                                break;
                        }
                    }
                    wait = false;
                },
                error: function (result) {

                }
            })
        }, 2000);
    });

</script>